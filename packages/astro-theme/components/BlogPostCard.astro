---
import { getEntry, type CollectionEntry } from "astro:content";
import FormattedDate from "./FormattedDate.astro";
import { resolveAuthors } from "../lib/blog";
import { Image } from "astro:assets";
import { productFromUrl } from "../lib/products";

const product = productFromUrl(Astro.url);

interface Props {
	post: CollectionEntry<"blog"> | CollectionEntry<"blog">["slug"];
	showMetadata?: boolean;
	size?: "wide" | "narrow";
}

const { post: postOrSlug, showMetadata = false, size = "narrow" } = Astro.props;
const post =
	typeof postOrSlug === "string"
		? await getEntry("blog", postOrSlug)
		: postOrSlug;
const authors = await resolveAuthors(post.data.authors);

//choose hover link color based on product
const productName = typeof product === "undefined" ? "Labs" : product.name;
//if product is cheerpj, add prefix /docs on post url
const blog_url = productName === "CheerpJ" ? "/docs/blog/" : "/blog/";
---

<a
	href={blog_url+post.slug}
	class="inline-flex flex-col space-between group overflow-hidden not-prose w-full"
>
	{
		post.data.heroImage && (
			<Image
				src={post.data.heroImage}
				width={size === "wide" ? 600 : 390}
				height={256}
				alt=""
				class="rounded-xl mb-4 bg-stone-100 object-cover w-full h-64 self-center"
			/>
		)
	}
	<h3
		class:list={{
			"font-bold text-balance text-white grow": true,
			"group-hover:text-cheerp grow": productName === "Cheerp",
			"group-hover:text-[#6386a5] grow": productName === "CheerpX",
			"group-hover:text-primary-400 grow": productName === "Labs",
			"text-2xl leading-7": size === "wide",
			"text-xl leading-6": size === "narrow",
		}}
	>
		{post.data.title}
	</h3>
	{
		showMetadata && (
			<div class="mt-4 flex justify-between items-center gap-8 text-stone-400 text-base whitespace-nowrap">
				<div class="flex items-center gap-2 font-semibold overflow-hidden">
					<div class="flex-none space-x-[-1rem]">
						{authors.map((author) =>
							author.avatar ? (
								<img
									class="inline-block w-8 h-8 rounded-full shadow border-2 border-stone-900"
									src={author.avatar.src}
									alt=""
									loading="lazy"
									decoding="async"
								/>
							) : undefined
						)}
					</div>
					<span class="overflow-hidden text-ellipsis">
						{authors.map((author) => author.name).join(", ")}
					</span>
					{authors.some((a) => a.guest) && (
						<span class="py-1 px-2 bg-primary-400 bg-opacity-50 border border-primary-400 text-white rounded-full text-xs font-semibold">
							Guest
						</span>
					)}
				</div>
				<FormattedDate date={post.data.pubDate} />
			</div>
		)
	}
</a>
