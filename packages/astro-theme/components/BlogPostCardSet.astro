---
import { getCollection, type CollectionEntry } from "astro:content";
import BlogPostCard from "./BlogPostCard.astro";
import { productFromUrl } from "../lib/products";

interface Props {
	// Only show posts if they have at least one of these tags
	tags?: string[] | undefined;

	// Exclude posts with these IDs
	exclude?: string[] | undefined;
}

const { tags, exclude } = Astro.props;
const product = productFromUrl(Astro.url);
const productName = typeof product === "undefined" ? "Labs" : product.name;

function sortCalc(post: CollectionEntry<"blog">): number {
	let relevancy =
		tags && post.data.tags
			? post.data.tags.filter((tag) => tags.includes(tag)).length
			: 0.1;
	if (post.data.featured) {
		relevancy *= 2;
	}
	return post.data.pubDate.valueOf();
}

const posts = (
	await getCollection("blog", (post) => {
		if (
			post.data.draft ||
			exclude?.includes(post.id) ||
			!(post.data?.tags?.includes(productName) || productName === "Labs")
		) {
			return false;
		} else {
			return true;
		}
	})
)
	.sort((a, b) => sortCalc(b) - sortCalc(a))
	.slice(0, 3);
---

<ul class="grid md:grid-cols-3 gap-8">
	{
		posts.map((post) => (
			<li class="flex justify-stretch items-stretch overflow-hidden">
				<BlogPostCard {post} showMetadata />
			</li>
		))
	}
</ul>
