---
import Icon from "astro-icon";
import Pagefind from "./Pagefind.svelte";
import DiscordButton from "../btn/DiscordButton.astro";
import type { Product } from "../../lib/nav";
import { t } from "../../lib/i18n";

interface Props {
	filterProductId?: Product | "blog"; // data-pagefind-filter productId
}
---

<site-search class="inline-block w-full h-10 max-w-full">
	<button
		data-open-modal
		class="text-stone-400 rounded-full px-1 sm:px-3 w-full h-full flex items-center gap-1.5 grow cursor-pointer sm:bg-stone-800"
	>
		<Icon name="fa-solid:search" class="w-4 h-4 mx-0.5" />
		<span class="hidden sm:block">{t("Search", Astro.currentLocale)}</span>
		<div class="grow hidden sm:block"></div>
		<div
			class="font-mono font-bold text-xs hidden md:block bg-stone-900 text-stone-600 w-5 h-5 leading-5 rounded"
			aria-label="Keybinding to open search"
		>
			/
		</div>
	</button>

	<dialog
		aria-label="Search"
		class="bg-stone-800 shadow rounded-lg w-11/12 max-w-xl border border-stone-700"
	>
		<Pagefind
			client:visible
			productId={Astro.props.filterProductId}
			placeholder={t("Type to search...", Astro.currentLocale)}
			locale={Astro.currentLocale}
		>
			<div
				slot="no-results"
				class="flex flex-col h-full items-center justify-center"
			>
				<div class="text-xl">
					ðŸ‘½ <span class="italic">{t("No results", Astro.currentLocale)}</span>
				</div>
				<p class="py-4 text-base text-stone-400 font-normal">
					{
						t(
							"If you have a question, please ask it in our Discord server.",
							Astro.currentLocale
						)
					}
				</p>
				<DiscordButton />
			</div>
		</Pagefind>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>(
				"button[data-open-modal]"
			);
			const dialog = this.querySelector<HTMLDialogElement>("dialog");

			if (!openBtn || !dialog) throw new Error("Missing required elements");

			const open = (event?: MouseEvent) => {
				dialog.showModal();

				const input = this.querySelector<HTMLInputElement>("input");
				if (!input) throw new Error("<Pagefind> missing input element");
				input.value = "";
				input.dispatchEvent(new Event("input"));
				input.focus();

				event?.stopPropagation();
			};
			openBtn.addEventListener("click", open);

			const toggle = () => {
				if (dialog.open) {
					close();
				} else {
					open();
				}
			};
			window.addEventListener("keydown", (event) => {
				if (event.key === "/") {
					open();
					event.preventDefault(); // Don't put `/` in input
				} else if ((event.metaKey || event.ctrlKey) && event.key === "k") {
					toggle();
					event.preventDefault();
				}
			});

			// Close if user clicks backdrop
			dialog.addEventListener("click", (event: MouseEvent) => {
				if (event.target === dialog) {
					dialog.close();
				}
			});
		}
	}

	customElements.define("site-search", SiteSearch);
</script>

<style>
	dialog::backdrop {
		background: rgba(0, 0, 0, 0.5); /* fallback if color-mix not supported */
		background: color-mix(var(--color-stone-900), 0.5);
		backdrop-filter: blur(4px);
	}
</style>
